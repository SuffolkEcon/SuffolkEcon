% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot_function}
\alias{plot_function}
\title{Plot a one-dimensional, user-defined function}
\usage{
plot_function(
  f,
  lower,
  upper,
  derivative = FALSE,
  optimize = FALSE,
  maximum = FALSE,
  roots = FALSE,
  optim = FALSE,
  ...
)
}
\arguments{
\item{f}{a single-line function}

\item{lower}{an integer indicating the lower bound}

\item{upper}{an integer indicating the upper bound}

\item{optimize}{optimize the function and plot the optimum and FOC (defaults to FALSE). If TRUE it defaults to finding the global minimum. Set \code{maximum = TRUE} to find the global maximum.}

\item{roots}{find and plot the roots over the given domain (defaults to FALSE)}

\item{optim}{use \code{optim()} to find optima (defaults to FALSE)}

\item{...}{additional arguments passed to \code{optim()} if \code{optim = TRUE}}

\item{maximize}{if \code{optimize = TRUE} find the maximum (defaults to FALSE and finds the minimum)}
}
\value{
\code{ggplot} object
}
\description{
Plot a one-dimensional, user-defined function
}
\examples{
# declare some function
## right now the function needs to be declared on a single line
f = function(x) -x^2 + 10*x
# plot the function over the domain x = {0, ..., 10}
plot_function(f, lower = 0, upper = 10)

# calculate and show the global maximum over the domain. Default is minimization, so set maximum to TRUE:
plot_function(f, lower = 0, upper = 10, optimize = TRUE, maximum = TRUE)

# show that the optimal point occurs where the derivative is zero (i.e., the first-order condition):
plot_function(f, lower = 0, upper = 10, derivative = TRUE, roots = TRUE)

# you can also define an anonymous function (i.e., define a function on the fly *inside* `plot_function`):
plot_function(function(x) sin(x) + sin(3*x) + cos(3*x), lower = 0, upper = 6)

# and show all roots over the domain:
plot_function(function(x) sin(x) + sin(3*x) + cos(3*x), lower = 0, upper = 6, roots = TRUE)

# plot_function uses uses `optimize()` by default, which implements Brent optimization. 
# It can struggle to find local optima for messy functions.
# For instance, it misses the local optimum:
plot_function(function(x) sin(x) + sin(3*x) + cos(3*x), lower = 0, upper = 6, optimize = TRUE)

# you can switch to `optim()` and then set the starting value `par` (from `optim`) to get better results:
plot_function(function(x) sin(x) + sin(3*x) + cos(3*x), lower = 0, upper = 6, optimize = TRUE, optim = TRUE, par = 5)

# since `plot_function` returns a ggplot object you can add ggplot stuff (e.g., change the theme, the titles, etc.)
plot_function(function(x) sin(x) + sin(3*x) + cos(3*x), lower = 0, upper = 6) +
    theme_minimal() +
    labs(subtitle = "the subtitle", title = "the title")
}
\author{
Lawrence R. De Geest
}
