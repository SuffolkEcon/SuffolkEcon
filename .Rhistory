data = mutate(data, derivative = fprime(x))
ggplot(data = data, aes(x=x, y = derivative)) + geom_line()
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
rlang::last_error()
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) + geom_line()
#geom_hline(yintercept = 0, color = l$hline_color) +
#geom_line(size = l$size, color = l$color) +
#labs(x = bquote(italic(x)), y = expression(over(df, dx)),
#     subtitle = "First derivative",
#     title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
#theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative))
geom_hline(yintercept = 0, color = l$hline_color) +
geom_line(size = l$size, color = l$color) #+
#labs(x = bquote(italic(x)), y = expression(over(df, dx)),
#     subtitle = "First derivative",
#     title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
#theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) +
geom_hline(yintercept = 0, color = l$hline_color) +
geom_line(size = l$size, color = l$color) #+
#labs(x = bquote(italic(x)), y = expression(over(df, dx)),
#     subtitle = "First derivative",
#     title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
#theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) +
#geom_hline(yintercept = 0, color = l$hline_color) +
geom_line(size = l$size, color = l$color) #+
labs(x = bquote(italic(x)), y = expression(over(df, dx)),
subtitle = "First derivative",
title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) +
geom_hline(yintercept = 0, color = l$hline_color) +
#geom_line(size = l$size, color = l$color) #+
labs(x = bquote(italic(x)), y = expression(over(df, dx)),
subtitle = "First derivative",
title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) +
geom_hline(yintercept = 0, color = l$hline_color) +
geom_line(color = l$color) #+
labs(x = bquote(italic(x)), y = expression(over(df, dx)),
subtitle = "First derivative",
title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE)
plot_function = function(.f, lower, upper, derivative = FALSE, optimize = FALSE, maximum = FALSE, roots = FALSE, ...) {
# sanity checks
if(length(formals(.f))>1) stop("plot_function can only be used with functions of one argument", call. = FALSE)
if(lower > upper) stop("Your lower bound is greater than the upper bound!", call. = FALSE)
# make sure the function actually works (evaluates without error) with some random number within the range
fun_works = rlang::with_handlers(
error = ~ rlang::abort(
c("something is wrong with the function you wrote",
i = "Make sure you only specified a function with one argument",
i = "And make sure the function only handles a numerical argument",
i = "e.g. `function(x) -x^2 + 10*x`")),
.f(runif(n = 1, min = lower, max = upper))
)
data = data.frame(x = seq(lower, upper, 0.1))
l = list(...) # capture the dots
if(is.null(l$optim_fill)) l$optim_fill = "white"
if(is.null(l$optim_color)) l$optim_color = "blue"
if(is.null(l$color)) l$color ="black"
if(is.null(l$hline_color)) l$hline_color = "gray"
## could add more stuff here...
if(!derivative){
p = ggplot(data = data, aes(x=x)) +
stat_function(fun=.f, size = 1, color = l$color)  +
labs(x = bquote(italic(x)), y = bquote(italic('f(x)')), title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) # note: parse() returns an expression()
if(optimize) {
# need error handling here?
if(is.null(l$par)) l$par = 1
if(is.null(l$method)) l$method = "L-BFGS-B"
if(maximum) control=list(fnscale=-1) else control = list(fnscale=1)
if(l$method %in% c("L-BFGS-B", "Brent")){
optimum = optim(par = l$par, fn = .f, method = l$method, control = control, lower = lower, upper = upper)
} else{
optimum = optim(par = l$par, fn = .f, method = l$method, control = control)
}
y = optimum$value
x_optim = optimum$par
step = 0.1*(max(data$x) - min(data$x)) # segment is 10% of the range
opt = ifelse(maximum, 'Maximum:', 'Minimum:')
subtitle = bquote(.(opt)~italic('x =')~.(round(x_optim,2))~','~italic('f(x) =')~.(round(y,2)))
p = p +
geom_segment(data = data, aes(x = (x_optim - step), y = y, xend = (x_optim + step), yend = y), color=l$optim_color) +
geom_point(aes(x = x_optim, y = y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color) +
labs(subtitle = subtitle)
}
if(roots){
# need error handling here?
all_roots = rootSolve::uniroot.all(.f, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p +
geom_hline(yintercept = 0, linetype = 'dotted') +
geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, fill = l$optim_fill, color = l$optim_color)
}
} else{ # plot the derivative
fprime = Deriv::Deriv(.f) # going this route instead of numDeriv::grad, so I can get a function fprime and then root it
data = mutate(data, derivative = fprime(x))
p = ggplot(data = data, aes(x=x, y = derivative)) +
geom_hline(yintercept = 0, color = l$hline_color) +
geom_line(size = 1, color = l$color) #+
labs(x = bquote(italic(x)), y = expression(over(df, dx)),
subtitle = "First derivative",
title =  parse(text = paste0("f(x) == ", deparse(.f)[2]))) +
theme(axis.title.y  = element_text(angle = 0, vjust = 0.5))
if(optimize || roots || maximum){
all_roots = rootSolve::uniroot.all(fprime, interval = c(min(data$x), max(data$x)))
all_roots_df = data.frame(x=all_roots, y=0)
p = p + geom_point(data = all_roots_df, aes(x = x, y= y), size = 3.5, pch = 21, fill = l$optim_fill, color = l$optim_color)
}
}
return(p)
}
plot_function(f, lower = 0, upper = 10, derivative = TRUE, optimize = TRUE)
devtools::install()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::install()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
