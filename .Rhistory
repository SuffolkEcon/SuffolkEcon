p1
}
plot_probability(model = 'rchisq', df = 5, lower = 0, alpha = 0.75)
d = match.fun("dchisq")
d
print(d)
plot_probability = function(model, lower=NULL, upper=NULL, cumulative = FALSE, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
return(d)
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x = seq(min(draws)-1, abs(min(draws) - 1), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# area to shade
#shade = filter(data, x > lower & x < upper)
# plot the pdf
p1 = data %>%
ggplot(aes(x = x, y = y)) +
#geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1)
p1
}
plot_probability(model = 'rchisq', df = 5, lower = 0)
dchisq
plot_probability = function(model, lower=NULL, upper=NULL, cumulative = FALSE, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# area to shade
#shade = filter(data, x > lower & x < upper)
# plot the pdf
p1 = data %>%
ggplot(aes(x = x, y = y)) +
#geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1)
p1
}
plot_probability(model = 'rchisq', df = 5, lower = 0)
plot_probability(model = 'rchisq', df = 1, lower = 0)
plot_probability(model = 'rchisq', df = 3, lower = 0)
rf
plot_probability(model = 'rf', df1 = 3, df2 = 49, lower = 0)
draws = rnorm(10000)
data = data.frame(x = seq(min(draws)-1, abs(min(draws) - 1), length.out = 10^3))
data$y = dnorm(data$x)
xstart = 2
xend = Inf
shade = filter(data, x > xstart & x < xend)
data %>%
ggplot(aes(x = x, y = y)) +
geom_area(data = shade, aes(x = x, y = y), fill = "blue", alpha = 0.7) +
geom_line(size = 1)
plot_probability(model = 'rf', df1 = 3, df2 = 49)
plot_probability = function(model, lower=NULL, upper=NULL, cumulative = FALSE, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# area to shade
shade = filter(data, x > lower & x < upper)
# plot the pdf
p1 = data %>%
ggplot(aes(x = x, y = y)) +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1)
p1
}
plot_probability(model = 'rf', df1 = 3, df2 = 49)
plot_probability = function(model, lower=NULL, upper=NULL, cumulative = FALSE, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# area to shade
shade = filter(data, x > lower & x < upper)
# plot the pdf
p = data %>%
ggplot(aes(x = x, y = y))
if(lower == -Inf & upper == Inf){ # if lower and upper are infinity don't shade (otherwise you shade the whole distribution)
p = p +
geom_line(size = 1)
} else{
p = p +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1)
}
p
}
plot_probability(model = 'rf', df1 = 3, df2 = 49)
plot_probability(model = 'rf', df1 = 3, df2 = 49, lower = 3)
plot_probability(model = 'rf', df1 = 3, df2 = 49, lower = 2)
plot_probability(model = 'rchisq', df = 5)
plot_probability(model = 'rchisq', df = 5, lower = 10)
plot_probability(model = 'rchisq', df = 5, lower = 4, upper = 10)
plot_probability(model = 'rnor')
plot_probability(model = 'rnorm')
plot_probability(model = 'rnorm', lower = 1, upper = 2)
plot_distribution(model = 'rnorm', mean = 15, sd = 5, name = "Normal")
plot_distribution(model = 'rnorm', mean = 15, sd = 5, name = "Normal", details = "Mean 15, SD 5")
plot_probability(model = 'rnorm', lower = 1, upper = 2)
plot_probability = function(model, lower=NULL, upper=NULL, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
# it's a bit hacky since we in fact need the density function!
# but this way the argument is the same as in plot_distribution()
# revisit this
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# area to shade
shade = filter(data, x > lower & x < upper)
# plot the pdf
p = data %>%
ggplot(aes(x = x, y = y)) +
labs(x = "Random Variable (X)", y = "Density", title = paste0(name, " PDF"), subtitle = details)
if(lower == -Inf & upper == Inf){ # if lower and upper are infinity don't shade (otherwise you shade the whole distribution)
p = p +
geom_line(size = 1)
} else{
p = p +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1)
}
p
}
plot_probability(model = 'rnorm', lower = 1, upper = 2)
plot_probability(model = 'rnorm', lower = 1, upper = 2, details = "hello")
plot_probability(model = 'rnorm', lower = 1, upper = 2, details = "hello\nworld")
plot_probability(model = 'rnorm', lower = 0.5, details = "hello\nworld")
plot_probability(model = 'rnorm', lower = 0, details = "hello\nworld")
pnorm(0)
pnorm(0) - pnorm(1)
pnorm(1) - pnorm(0)
?pnorm
?pchisq
paste0(NULL, "\n", "Yo")
plot_probability = function(model, lower=NULL, upper=NULL, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
# it's a bit hacky since we in fact need the density function!
# but this way the argument is the same as in plot_distribution()
# revisit this
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# plot the pdf
p = data %>%
ggplot(aes(x = x, y = y)) +
labs(x = "Random Variable (X)", y = "Density", title = paste0(name, " PDF"), subtitle = details)
if(lower == -Inf & upper == Inf){ # if lower and upper are infinity don't shade (otherwise you shade the whole distribution)
p = p +
geom_line(size = 1)
} else{
shade = filter(data, x > lower & x < upper)
pfunc = match.fun(paste0("p", substring(model,2)))
pvalue = pfunc(upper, ...) - pfunc(lower, ...)
if(is.null(details)) new_subtitle = paste0("Shaded area = ", pvalue)
p = p +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1) +
labs(subtitle = new_subtitle)
}
p
}
plot_probability(model = 'rnorm', lower = 0)
plot_probability(model = 'rnorm', lower = 0, upper = 1)
plot_probability = function(model, lower=NULL, upper=NULL, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
# it's a bit hacky since we in fact need the density function!
# but this way the argument is the same as in plot_distribution()
# revisit this
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# plot the pdf
p = data %>%
ggplot(aes(x = x, y = y)) +
labs(x = "Random Variable (X)", y = "Density", title = paste0(name, " PDF"), subtitle = details)
if(lower == -Inf & upper == Inf){ # if lower and upper are infinity don't shade (otherwise you shade the whole distribution)
p = p +
geom_line(size = 1)
} else{
shade = filter(data, x > lower & x < upper)
pfunc = match.fun(paste0("p", substring(model,2)))
pvalue = pfunc(upper, ...) - pfunc(lower, ...)
if(is.null(details)) new_subtitle = paste0("Shaded area = ", round(pvalue, 4))
else new_subtitle = paste0(details, "\n", paste0("Shaded area = ", round(pvalue, 4)))
p = p +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1) +
labs(subtitle = new_subtitle)
}
p
}
plot_probability(model = 'rnorm', lower = 0, upper = 1)
plot_probability(model = 'rnorm', lower = 0, upper = 1, details = "Mean 0 SD 1")
plot_probability(model = 'rchisq', df = 5)
plot_probability(model = 'rchisq', df = 5, lower = 5)
plot_probability(model = 'rchisq', df = 5, lower = 10)
plot_probability(model = 'rchisq', df = 5, lower = 0)
plot_distribution(model = 'rnorm', lower = -Inf, name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability(model = 'rnorm', lower = -Inf, name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability = function(model, lower=NULL, upper=NULL, name = NULL, details = NULL, fill = "grey35", color  = "grey35", alpha = 1, ...){
# make sure the function exists
f = rlang::with_handlers(
error = ~ rlang::abort(c("unknown function", x = paste0("Could not find the function ",paste0("'",model,"'")),
i =  "Did you spell it correctly? It should start with an 'r' (e.g. rnorm, runif, rpois)",
i = "For a demo try `model = rnorm`")),
match.fun(model)
)
# now make sure it's an "r" function (e.g rnorm, not dnorm)
# it's a bit hacky since we in fact need the density function!
# but this way the argument is the same as in plot_distribution()
# revisit this
if(substring(model,1,1) != "r") stop("make sure the model generates random numbers (e.g., 'rnorm' instead of 'dnorm', etc.)", call. = FALSE)
# if they don't provide a name just use the function itself for the title (minus the "r")
if(is.null(name)) name = substring(model,2)
if(is.null(lower)) lower = -Inf
if(is.null(upper)) upper = Inf
# ok, get the draw
draws = rlang::with_handlers(
error = ~ rlang::abort(c("problem simulating the distribution",
x = "Unknown arguments passed to `model`",
i =  "Did you forget to explicitly state a named argument?")),
f(n=10^4, ...)
)
# now get the corresponding density function
d = match.fun(paste0("d", substring(model,2)))
# build data frame
## generate a shorter sequence with same bounds so that it still ensures a smooth CDF
### otherwise geom_area takes too long
data = data.frame(x =seq(min(draws), max(draws), length.out = 10^3))
# add the densities (d is the matched density function)
data$y = d(data$x, ...)
# plot the pdf
p = data %>%
ggplot(aes(x = x, y = y)) +
labs(x = "Random Variable (X)", y = "Density", title = paste0(name, " PDF"), subtitle = details)
# get the shaded area
shade = filter(data, x > lower & x < upper)
# get the p function to calculate area
pfunc = match.fun(paste0("p", substring(model,2)))
pvalue = pfunc(upper, ...) - pfunc(lower, ...)
# update the subtitle
if(is.null(details)) new_subtitle = paste0("Shaded area = ", round(pvalue, 4))
else new_subtitle = paste0(details, "\n", paste0("Shaded area = ", round(pvalue, 4)))
# update the plot
p = p +
geom_area(data = shade, aes(x = x, y = y), fill = fill, alpha = alpha) +
geom_line(size = 1, color = color) +
labs(subtitle = new_subtitle)
return(p)
}
plot_probability(model = 'rnorm', lower = -Inf, name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability(model = 'rnorm', lower = 0.5, name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability(model = 'rnorm', lower = 0, name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability(model = 'rnorm', lower = 0, upper =1,  name = "Standard Normal", details = "Mean 0 SD 1")
plot_probability(model = 'rchisq', df = 5, lower = 3, name = "Chi-squared", details = "5 degrees of freedom")
plot_probability(model = 'rchisq', df = 5, lower = 8, name = "Chi-squared", details = "5 degrees of freedom")
devtools::install(build_vignettes = FALSE)
devtools::install(build_vignettes = FALSE)
devtools::install(build_vignettes = FALSE)
install.packages("vctrs")
install.packages("vctrs")
devtools::install(build_vignettes = FALSE)
install.packages("vctrs", repos = "https://packagemanager.rstudio.com/cran/latest")
install.packages("vctrs", repos = "https://packagemanager.rstudio.com/cran/latest")
.libPaths()
devtools::install(build_vignettes = FALSE)
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
whatif(data = nhanes, model = weight ~ height, sample_size = 30, experiments = 10, p.values = TRUE)
whatif(data = nhanes, model = weight ~ height, sample_size = 30, experiments = 1000, p.values = TRUE)
whatif(data = nhanes, model = weight ~ height, sample_size = 30, experiments = 100, p.values = TRUE)
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
install.packages("nhanesA")
library(nhanesA)
NHANES <- read.csv("https://query.data.world/s/2mw3upj3sjbq5bzpjkgw3rhwjconn2", header=TRUE, stringsAsFactors=FALSE);
View(NHANES)
NHANES = readr::read_csv("https://github.com/ProjectMOSAIC/NHANES/blob/master/data-raw/NHANES.csv")
NHANES = readr::read_csv("https://raw.githubusercontent.com/ProjectMOSAIC/NHANES/master/data-raw/NHANES.csv")
install.packages("NHANES")
df = NHANES
rm(NHANES)
library(NHANES)
View(NHANES::NHANES)
data("nhanes")
View(nhanes)
NHANES %>% nrow()
NHANES %>% drop_na() %>% nrow()
library(tidyverse)
NHANES %>% drop_na() %>% nrow()
install.packages("palmerpenguins")
library(palmerpenguins)
library(palmerpenguins)
palmerpenguins = palmerpenguins
penguins = palmerpenguins::penguins
View(penguins)
penguins = penguins %>% drop_na()
usethis::use_data(penguins)
data("hprice2", package = "wooldridge")
usethis::use_data(hprice2)
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
View(nhanes)
View(hprice2)
hprice = hprice2
usethis::use_data(hprice)
devtools::install(build_vignettes = FALSE)
devtools::install(build_vignettes = FALSE)
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
devtools::install(build_vignettes = FALSE)
devtools::document()
pkgdown::build_site()
